from matplotlib import pyplot as plt


input_moves = """L 1
U 1
L 1
D 2
U 2
L 2
U 2
L 2
U 2
L 1
U 1
D 1
R 2
U 1
R 2
D 1
U 1
L 1
R 1
L 1
R 2
D 1
L 2
U 2
D 2
L 1
U 1
L 2
R 2
L 1
D 2
U 2
R 1
U 2
D 1
L 1
R 1
U 2
D 2
U 2
L 1
U 2
L 2
R 2
L 1
D 1
L 1
U 2
L 2
U 2
R 1
U 1
L 2
R 1
L 2
D 2
L 2
D 2
L 2
R 2
D 1
U 2
L 2
D 2
L 1
U 1
R 2
D 1
U 2
L 1
U 2
D 2
L 1
D 1
L 1
U 2
R 2
L 2
R 1
D 2
R 2
D 2
U 1
D 2
U 2
L 2
U 1
D 2
L 1
D 2
U 2
D 2
L 1
U 2
R 2
L 2
U 1
D 2
L 1
R 1
U 2
D 2
L 1
R 1
U 1
L 2
D 2
R 1
U 1
L 2
R 2
U 1
L 3
D 2
L 1
U 3
R 3
U 1
R 3
D 3
U 2
D 2
R 1
U 2
L 1
R 3
L 1
U 1
D 2
R 1
L 1
R 2
D 2
L 3
D 2
U 2
R 1
D 1
U 1
R 3
L 2
R 1
L 1
R 1
L 1
R 2
U 1
L 2
R 2
U 3
D 2
L 3
R 1
L 1
U 3
D 1
L 3
U 2
L 1
D 3
L 2
R 3
L 2
D 1
U 2
R 3
L 3
U 2
R 2
D 3
U 2
D 2
U 1
L 1
R 1
U 3
R 1
D 2
L 3
U 2
D 1
R 1
D 3
R 1
L 1
U 3
D 1
L 3
R 1
U 2
L 2
D 1
R 2
L 3
U 3
L 1
U 1
L 1
U 3
L 2
U 1
D 2
U 2
R 3
U 1
D 2
U 1
D 2
U 3
L 1
R 2
L 2
U 3
L 2
R 3
U 1
R 3
D 3
L 2
U 2
R 1
U 1
L 3
R 1
L 1
R 1
L 1
D 3
R 2
U 1
D 3
L 3
U 3
L 1
D 2
L 3
D 3
R 4
U 2
R 2
U 3
L 2
R 3
U 1
L 1
D 1
U 1
D 4
U 4
D 2
U 2
D 3
L 4
D 2
R 1
U 1
D 3
R 3
D 3
U 3
D 1
R 3
D 1
U 3
D 4
R 3
L 2
R 1
L 3
D 1
R 4
U 4
L 1
U 4
R 4
U 3
R 4
D 4
L 3
R 1
D 3
U 2
R 4
U 1
D 4
U 2
R 2
L 4
D 4
U 2
D 1
R 4
U 2
D 1
U 3
D 2
L 2
R 3
L 1
R 2
U 4
L 3
U 1
R 4
U 2
R 3
L 2
U 4
R 1
D 1
U 4
R 1
D 3
R 1
L 1
D 3
L 4
R 2
D 4
R 2
D 1
R 1
L 4
D 3
U 1
D 4
L 4
D 2
R 2
U 1
L 1
D 1
U 3
D 4
U 3
R 5
D 2
L 3
U 4
R 1
U 5
R 3
L 5
R 2
U 4
L 3
U 3
L 4
D 4
U 3
L 1
U 2
L 5
R 2
U 5
R 5
L 4
D 2
R 4
U 1
L 5
U 4
L 3
R 5
D 5
L 5
U 2
D 1
L 3
R 5
D 1
L 4
R 1
U 4
L 3
U 3
R 2
U 3
R 4
L 2
R 3
U 4
L 3
U 5
D 3
L 2
R 1
L 1
U 4
R 5
D 3
U 2
L 5
R 4
U 1
L 5
D 5
U 5
D 5
U 3
L 3
R 3
L 1
U 2
D 4
R 4
L 1
D 3
R 5
D 3
R 4
D 5
L 4
D 2
U 1
L 5
U 4
L 4
R 1
D 2
L 5
R 2
U 4
R 5
L 1
D 3
L 4
U 3
L 3
U 1
D 1
R 1
D 1
U 3
D 1
L 5
D 2
R 1
D 1
L 5
U 2
L 4
D 5
U 1
R 5
U 6
D 3
U 1
R 6
D 6
L 3
U 4
D 2
U 3
L 2
U 2
L 4
D 5
U 3
D 1
R 6
L 6
R 5
U 1
R 1
L 1
U 1
R 4
U 2
D 5
L 6
D 6
U 5
L 2
D 3
R 2
U 6
L 6
D 1
L 3
U 6
L 2
U 4
R 4
D 5
R 3
D 5
R 3
D 4
R 3
D 3
U 5
D 2
U 6
R 1
L 2
R 5
L 2
U 2
D 6
R 5
U 2
D 1
L 1
D 3
U 5
D 2
R 4
D 6
L 4
R 1
U 4
L 6
D 6
L 4
D 1
L 4
R 1
D 1
U 3
L 6
D 2
U 5
R 3
U 2
R 5
L 3
U 5
L 4
U 1
R 5
D 3
L 6
U 1
L 6
U 1
L 5
D 5
L 4
D 5
U 3
R 3
D 3
L 2
R 2
D 4
U 5
L 1
U 6
D 6
U 1
D 3
L 4
R 6
D 4
L 3
R 5
U 1
L 1
R 3
L 2
D 4
L 4
D 6
L 2
D 5
L 1
R 4
U 3
L 1
D 7
U 5
D 2
R 6
L 1
U 3
L 2
R 1
U 6
L 3
D 2
R 4
D 2
U 2
L 5
U 7
D 7
U 3
L 5
R 5
U 6
D 1
L 6
U 7
D 5
U 6
R 4
U 5
D 1
L 5
U 5
R 1
U 3
L 4
D 4
L 5
U 1
R 5
U 3
L 3
R 1
U 6
L 3
D 3
R 4
L 1
R 6
D 4
L 1
R 6
L 4
U 4
R 4
L 1
R 6
L 4
D 3
R 4
L 7
D 1
R 6
D 5
L 2
U 2
D 5
U 3
R 2
D 3
R 6
L 5
R 4
L 1
D 7
U 7
R 3
D 3
R 2
U 3
R 1
D 5
U 5
R 4
L 6
R 6
U 4
R 2
L 3
U 5
R 2
L 5
D 6
L 3
U 6
R 7
U 5
R 1
L 6
D 2
R 1
D 1
R 2
D 3
U 2
D 1
U 1
D 6
R 2
U 5
L 5
D 2
R 7
D 7
U 8
D 3
L 1
U 6
R 8
D 6
U 5
R 2
L 5
R 7
D 8
U 4
R 8
D 8
R 4
L 4
U 2
R 6
U 4
R 7
D 6
L 8
R 8
L 7
D 2
L 3
D 3
R 7
D 8
U 4
R 8
U 8
L 2
D 2
L 6
U 2
L 8
R 3
L 1
D 6
U 4
R 3
U 4
D 1
U 5
D 5
U 2
L 8
U 3
R 6
L 1
R 2
U 3
D 2
L 5
U 2
L 8
U 4
L 1
R 7
D 6
L 5
D 7
R 7
U 8
R 3
U 1
D 5
L 8
D 6
L 1
R 8
L 6
U 7
R 5
L 7
R 6
D 3
R 7
D 6
U 5
R 6
D 2
U 8
L 4
D 1
R 5
D 8
L 7
U 4
R 6
L 5
U 1
D 3
L 7
R 2
U 9
L 3
U 7
R 6
L 1
U 2
R 8
U 4
R 3
L 7
U 3
L 1
D 2
R 1
U 2
L 9
R 3
D 1
L 7
U 2
D 1
L 5
R 9
U 1
D 1
U 4
R 9
U 7
L 5
R 7
L 7
R 6
D 6
R 3
D 4
R 9
U 3
R 6
L 8
U 4
L 5
R 2
L 1
R 9
L 2
U 8
D 5
R 7
D 7
L 9
D 6
U 2
R 6
L 5
D 5
U 7
R 6
L 6
U 1
R 9
U 8
D 6
R 9
D 7
R 8
D 7
R 4
D 9
L 2
R 7
L 3
D 7
U 3
L 7
D 4
R 4
L 5
R 7
U 6
L 5
D 9
U 8
L 1
D 8
U 1
L 2
U 6
L 3
D 6
R 3
L 1
U 3
D 5
U 9
R 3
U 7
L 5
D 3
L 8
U 9
L 7
U 4
R 7
L 3
R 7
L 4
D 4
L 5
R 2
L 2
U 2
D 1
R 2
D 5
R 10
U 5
D 6
R 4
L 8
U 8
R 6
L 1
U 4
L 5
D 8
R 7
L 4
D 4
U 6
L 6
U 3
R 10
D 7
U 6
D 3
R 8
L 2
U 5
L 2
D 8
R 3
L 6
U 2
D 1
U 7
R 3
U 7
L 7
R 8
D 3
R 9
U 5
R 6
D 3
L 4
R 5
U 4
L 7
U 5
R 7
D 2
R 4
D 4
L 6
D 9
R 2
L 3
U 10
R 2
D 5
U 8
L 3
R 6
L 5
U 5
L 5
D 5
L 3
D 4
U 8
R 2
L 9
D 8
U 9
L 7
U 5
D 3
L 9
R 2
U 6
D 5
U 4
D 3
L 9
D 7
U 8
R 6
L 5
D 2
U 5
R 2
D 9
U 9
D 9
L 7
D 5
R 1
U 9
L 6
U 5
L 7
D 8
U 7
L 9
D 3
R 9
U 2
D 8
L 2
D 9
R 8
U 6
D 10
R 7
D 3
U 5
R 8
D 10
R 3
L 2
R 5
U 5
D 11
L 5
D 4
R 8
L 7
R 4
L 6
U 6
L 5
U 9
R 10
D 1
L 2
U 9
L 2
U 4
R 1
L 11
D 8
R 9
D 5
R 11
L 10
R 2
U 7
D 9
U 4
L 10
U 8
D 2
L 4
U 11
R 5
U 8
L 7
D 5
L 10
R 8
L 11
U 10
L 5
U 6
L 8
U 9
L 1
U 2
D 10
U 6
R 4
U 7
L 8
D 5
U 1
D 2
L 2
U 5
L 2
U 11
D 10
L 8
U 2
L 8
R 6
U 5
R 7
L 1
D 10
L 10
U 4
R 8
D 2
R 4
U 7
L 8
D 8
U 2
L 5
U 3
D 4
L 7
R 8
D 11
U 1
D 5
R 10
D 2
U 11
R 1
D 3
L 3
R 11
L 9
D 11
L 10
U 1
R 9
U 9
L 8
U 5
D 11
U 9
R 7
D 8
R 4
U 5
D 11
L 8
D 3
R 7
L 2
D 3
R 7
L 3
U 3
D 1
U 6
L 7
U 8
D 4
L 12
D 5
U 4
D 5
U 2
R 9
L 6
R 2
D 3
U 1
R 11
U 3
R 4
D 10
R 3
L 8
U 11
L 2
U 6
R 12
D 7
L 2
D 7
L 12
D 9
R 11
D 6
R 4
L 4
D 6
R 11
L 9
D 3
R 2
L 12
D 6
R 7
L 7
D 5
L 6
R 2
U 1
D 6
R 6
L 12
R 8
U 9
L 2
U 7
R 9
D 9
U 4
D 3
R 10
L 1
D 10
R 9
U 5
L 2
D 7
R 10
U 12
D 11
U 11
L 8
R 5
L 11
U 3
D 8
U 11
D 2
R 2
D 2
U 3
D 8
U 2
D 11
L 1
D 11
U 11
L 7
D 6
U 5
D 7
R 12
U 3
D 5
R 8
D 4
L 2
U 11
R 12
D 1
R 13
D 12
R 3
D 7
R 1
U 4
L 9
U 3
D 12
L 4
D 6
L 9
D 8
R 5
L 4
R 3
D 1
U 8
R 8
D 7
L 8
R 8
U 6
R 5
L 8
U 4
D 11
R 3
U 12
D 8
L 13
U 3
L 5
U 2
L 9
R 7
U 11
D 10
R 6
L 2
D 6
R 9
U 13
L 13
D 5
U 11
L 10
U 9
L 8
D 7
R 4
L 7
D 13
U 9
D 9
U 12
R 9
U 1
D 7
L 2
D 6
R 1
U 4
R 6
U 9
L 8
U 10
L 2
U 5
R 4
D 9
L 12
U 8
L 2
D 9
U 4
R 1
D 5
R 11
U 10
D 12
R 2
U 6
R 4
U 5
R 5
L 12
R 10
D 9
L 11
D 10
R 2
U 4
R 5
L 4
U 10
D 10
U 2
L 4
R 7
D 12
U 8
L 8
D 12
R 7
L 13
D 12
R 11
U 13
L 11
U 5
D 11
U 2
D 14
U 7
R 1
D 10
R 10
D 13
R 3
D 13
U 2
L 13
U 9
D 13
L 7
D 3
L 4
R 1
D 11
U 1
D 7
L 1
U 1
R 6
D 14
L 11
U 13
D 10
L 3
R 11
L 3
D 10
L 11
U 4
L 13
U 13
D 12
R 5
D 1
U 14
D 3
U 4
D 5
L 3
D 2
R 3
U 8
D 5
U 13
R 11
L 10
R 13
L 6
U 10
R 2
U 9
D 12
L 7
D 8
U 4
D 7
L 5
U 10
D 10
R 6
L 14
D 11
U 13
D 13
U 10
L 1
U 2
L 14
U 2
R 2
D 12
R 2
L 12
U 1
D 13
R 12
L 9
U 5
D 11
L 7
R 3
U 2
L 4
U 8
L 10
D 13
L 2
U 7
L 8
R 1
U 3
L 14
U 11
L 3
U 11
L 7
R 13
U 13
L 4
U 12
R 2
L 8
D 10
L 7
U 10
R 2
L 4
D 14
R 11
D 4
L 4
R 6
L 3
R 5
U 5
L 9
R 9
L 3
R 14
U 10
D 8
U 5
L 9
R 15
L 1
R 4
U 9
R 9
D 10
L 7
D 15
U 12
L 4
U 10
D 14
R 11
D 5
U 14
L 8
R 2
U 13
D 5
L 2
U 15
R 11
L 1
U 5
D 4
R 4
D 10
U 13
L 12
R 2
U 4
L 13
R 4
U 4
R 14
D 10
R 11
D 7
U 12
L 4
U 11
D 6
R 1
D 5
L 12
R 7
L 3
U 11
R 15
D 1
R 2
L 6
U 7
L 5
R 4
D 3
R 13
L 12
R 15
L 15
U 14
D 8
U 1
D 14
U 14
L 2
D 1
R 4
L 14
R 11
U 11
L 10
D 10
R 13
U 11
L 7
R 4
U 14
L 2
D 15
R 11
D 11
L 13
R 13
D 2
R 4
U 5
L 14
D 9
R 11
D 4
U 6
D 13
R 11
D 6
L 14
D 13
L 7
U 7
L 8
D 7
L 15
D 7
R 11
U 6
L 10
U 4
R 12
L 2
D 10
L 14
R 15
D 1
U 15
L 11
D 5
L 11
D 6
U 7
L 14
R 8
U 1
R 4
D 2
R 3
L 6
U 8
L 15
U 16
L 9
R 16
U 6
L 7
U 3
R 13
L 6
U 14
L 13
R 2
U 10
R 4
U 6
D 7
R 16
U 16
L 14
D 6
U 1
D 16
L 10
D 7
L 16
D 12
R 13
U 15
R 2
U 15
D 2
L 14
R 13
L 1
U 10
D 10
L 2
D 6
L 14
D 15
U 1
D 10
L 10
D 5
L 10
R 14
U 1
R 7
L 3
R 9
U 10
D 2
R 5
D 9
U 15
D 4
U 16
D 14
R 9
D 13
R 16
D 14
L 12
R 16
D 2
L 7
D 4
U 5
L 10
R 11
L 2
R 1
U 4
R 2
L 12
D 7
U 12
L 2
U 7
L 12
U 1
R 3
U 9
D 1
U 13
R 17
U 12
R 3
D 10
R 6
L 14
U 5
D 3
U 4
D 11
U 7
L 15
U 14
L 1
U 10
R 1
L 9
U 12
R 15
D 11
R 3
L 15
U 7
R 12
U 7
D 10
R 17
D 13
L 7
U 9
R 14
L 16
R 3
U 5
L 10
D 16
L 7
U 11
R 7
L 8
D 4
L 6
D 6
U 17
D 6
R 14
D 4
R 17
U 4
L 17
D 5
R 16
U 10
R 11
D 7
R 14
D 14
L 2
R 11
L 16
D 14
R 4
L 7
D 15
R 13
U 8
L 12
R 4
U 16
D 2
U 10
D 2
U 1
L 5
U 4
L 17
R 11
D 9
L 2
U 12
R 3
D 3
L 10
R 2
D 2
L 4
R 14
U 3
R 16
L 11
U 1
L 15
R 9
U 7
L 12
U 10
L 2
U 3
R 8
L 13
R 4
D 3
U 10
D 12
R 7
U 12
R 9
L 18
D 4
U 16
R 7
U 13
D 10
R 13
U 12
R 8
D 16
R 4
L 3
D 13
U 11
D 7
L 3
R 10
L 16
D 4
L 15
U 13
R 15
L 6
R 14
D 8
R 16
D 10
U 10
L 12
D 17
R 10
L 4
R 4
U 8
R 1
U 13
D 17
L 4
D 3
U 3
L 8
D 3
U 12
D 2
U 11
L 15
R 11
L 14
U 5
D 6
L 17
U 18
R 1
U 2
R 15
U 8
L 9
U 16
L 7
D 9
L 8
U 4
D 3
L 6
U 10
L 14
R 17
L 16
U 15
R 5
D 2
U 8
L 8
U 11
D 6
L 14
U 2
D 3
R 10
U 2
D 16
U 2
D 1
L 12
R 4
L 13
D 15
U 6
R 11
U 5
L 7
D 15
R 2
D 9
R 16
U 1
L 12
U 6
D 3
U 3
L 6
U 11
R 4
L 11
R 12
U 14
L 13
D 13
L 5
U 19
D 11
L 14
U 12
D 1
R 15
L 17
U 6
R 3
U 11
D 11
U 14
R 3
L 10
D 11
L 8
U 18
L 7
R 6
U 4
D 7
L 4
R 12
U 2
R 17
U 2
L 9
R 18
U 13
L 14
D 16
U 3
D 8
U 17
D 15
L 13
R 6
D 13
U 17
L 19
U 3
L 2
D 14
R 13
D 13
L 7
R 12
D 7
U 8
D 4
U 13
D 11
U 2
D 6
L 1
D 19
L 9
D 5
R 11
U 19
L 11
D 3
R 3
U 6
D 18
U 17
D 12
R 13
U 18
R 14
L 10
R 15
L 1
U 14
L 19
D 1
U 13
L 4
R 6
D 10
R 6
D 6
L 15
D 8
L 8
U 3
D 14
U 5
L 4
U 14
R 3
U 16
R 5
L 18
R 16
D 13
U 9
R 14
L 2
D 12
R 5
U 17
R 9
L 11
D 8
L 8
D 8
U 6
R 16
L 5
D 14"""


def move_tail(tail_pos: tuple[int, int], current_pos: tuple[int, int]) -> bool:
    """Returns True if tail is not in the current surroundings"""
    x, y = current_pos
    north = (x, y + 1)
    northeast = (x + 1, y + 1)
    east = (x + 1, y)
    southeast = (x + 1, y - 1)
    south = (x, y - 1)
    southwest = (x - 1, y - 1)
    west = (x - 1, y)
    northwest = (x - 1, y + 1)
    current_surroundings = [
        current_pos,
        north,
        northeast,
        east,
        southeast,
        south,
        southwest,
        west,
        northwest,
    ]
    return tail_pos not in current_surroundings


x = 0  # left/right
y = 0  # up/down
tail_x, tail_y = 0, 0
current_position = 0, 0
tail_visited = [(0, 0)]
for move in input_moves.split('\n'):
    direction, steps = move.split(' ')
    for _ in range(int(steps)):
        if direction == 'R':
            prev_x, prev_y = current_position
            x = x + 1
            if move_tail((tail_x, tail_y), (x, y)):
                tail_x, tail_y = prev_x, prev_y
                if (tail_x, tail_y) not in tail_visited:
                    tail_visited.append((tail_x, tail_y))
            current_position = (x, prev_y)
        elif direction == 'L':
            prev_x, prev_y = current_position
            x = x - 1
            if move_tail((tail_x, tail_y), (x, y)):
                tail_x, tail_y = prev_x, prev_y
                if (tail_x, tail_y) not in tail_visited:
                    tail_visited.append((tail_x, tail_y))
            current_position = (x, prev_y)
        elif direction == 'U':
            prev_x, prev_y = current_position
            y = y + 1
            if move_tail((tail_x, tail_y), (x, y)):
                tail_x, tail_y = prev_x, prev_y
                if (tail_x, tail_y) not in tail_visited:
                    tail_visited.append((tail_x, tail_y))
            current_position = (prev_x, y)
        elif direction == 'D':
            prev_x, prev_y = current_position
            y = y - 1
            if move_tail((tail_x, tail_y), (x, y)):
                tail_x, tail_y = prev_x, prev_y
                if (tail_x, tail_y) not in tail_visited:
                    tail_visited.append((tail_x, tail_y))
            current_position = (prev_x, y)
print(len(tail_visited))

# Part 2


def move_how(current_knot: tuple[int, int], previous_knot: tuple[int, int], direction: str) -> tuple[int, int]:
    """returns offsets for x, y"""
    current_x, current_y = current_knot
    north = (current_x, current_y + 1)
    northeast = (current_x + 1, current_y + 1)
    east = (current_x + 1, current_y)
    southeast = (current_x + 1, current_y - 1)
    south = (current_x, current_y - 1)
    southwest = (current_x - 1, current_y - 1)
    west = (current_x - 1, current_y)
    northwest = (current_x - 1, current_y + 1)
    immediate_surroundings = [
        current_knot,
        north,
        northeast,
        east,
        southeast,
        south,
        southwest,
        west,
        northwest,
    ]
    northnorth = (current_x, current_y + 2)
    northnortheast = (current_x + 1, current_y + 2)
    northnortheasteast = (current_x + 2, current_y + 2)
    northeasteast = (current_x + 2, current_y + 1)
    easteast = (current_x + 2, current_y)
    southeasteast = (current_x + 2, current_y - 1)
    southsoutheasteast = (current_x + 2, current_y - 2)
    southsoutheast = (current_x + 1, current_y - 2)
    southsouth = (current_x, current_y - 2)
    southsouthwest = (current_x - 1, current_y - 2)
    southsouthwestwest = (current_x - 2, current_y - 2)
    southwestwest = (current_x - 2, current_y - 1)
    westwest = (current_x - 2, current_y)
    northwestwest = (current_x - 2, current_y + 1)
    northnorthwestwest = (current_x - 2, current_y + 2)
    northnorthwest = (current_x - 1, current_y + 2)
    if previous_knot in immediate_surroundings:
        return 0, 0
    if direction in {'R', 'L'}:
        if previous_knot == easteast:
            return 1, 0
        if previous_knot == westwest:
            return -1, 0
        if previous_knot == northnorth:
            return 0, 1
        if previous_knot == southsouth:
            return 0, -1
        if previous_knot in [northnortheast, northnortheasteast, northeasteast]:
            return 1, 1
        if previous_knot in [southeasteast, southsoutheasteast, southsoutheast]:
            return 1, -1
        if previous_knot in [northnorthwest, northnorthwestwest, northwestwest]:
            return -1, 1
        if previous_knot in [southwestwest, southsouthwestwest, southsouthwest]:
            return -1, -1
    if direction in {'U', 'D'}:
        if previous_knot == northnorth:
            return 0, 1
        if previous_knot == southsouth:
            return 0, -1
        if previous_knot == easteast:
            return 1, 0
        if previous_knot == westwest:
            return -1, 0
        if previous_knot in [northnortheast, northnortheasteast, northeasteast]:
            return 1, 1
        if previous_knot in [northnorthwest, northnorthwestwest, northwestwest]:
            return -1, 1
        if previous_knot in [southsoutheast, southsoutheasteast, southeasteast]:
            return 1, -1
        if previous_knot in [southsouthwest, southsouthwestwest, southwestwest]:
            return -1, -1
    return 0, 0


knots = {
    0: (0, 0),
    1: (0, 0),
    2: (0, 0),
    3: (0, 0),
    4: (0, 0),
    5: (0, 0),
    6: (0, 0),
    7: (0, 0),
    8: (0, 0),
    9: (0, 0)
}
tail_visited = [(0, 0)]
for i, move in enumerate(input_moves.split('\n')):
    direction, steps = move.split(' ')
    for _ in range(int(steps)):
        for knot in knots:
            if knot == 0:
                if direction == 'R':
                    knots[knot] = (knots[knot][0] + 1, knots[knot][1])  # x + 1
                    continue
                if direction == 'L':
                    knots[knot] = (knots[knot][0] - 1, knots[knot][1])
                    continue
                if direction == 'U':
                    knots[knot] = (knots[knot][0], knots[knot][1] + 1)
                    continue
                if direction == 'D':
                    knots[knot] = (knots[knot][0], knots[knot][1] - 1)
                    continue
            moves = move_how(knots[knot], knots[knot-1], direction)
            if moves[0]:
                if moves[0] > 0:
                    x = knots[knot][0] + moves[0]
                else:
                    x = knots[knot][0] - moves[0].__neg__()
                knots[knot] = x, knots[knot][1]
            if moves[1]:
                if moves[1] > 0:
                    y = knots[knot][1] + moves[1]
                else:
                    y = knots[knot][1] - moves[1].__neg__()
                knots[knot] = knots[knot][0], y
            if knot == 9 and (moves[0] or moves[1]) and knots[knot] not in tail_visited:
                tail_visited.append(knots[knot])
    # plt.scatter(*zip(*list(knots.values())))
    # plt.show()
print(len(tail_visited))

plt.scatter(*zip(*tail_visited))
plt.show()
